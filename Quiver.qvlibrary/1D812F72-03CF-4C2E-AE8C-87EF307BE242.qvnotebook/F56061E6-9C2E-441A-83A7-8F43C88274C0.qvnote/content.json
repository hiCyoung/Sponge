{
  "title": "Linux Socket编程",
  "cells": [
    {
      "type": "text",
      "data": "<div id=\"cnblogs_post_body\" style=\"margin-bottom: 20px; word-break: break-word; font-family: Georgia, 'Times New Roman', Times, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><p align=\"right\" style=\"line-height: 1.8; margin: 10px auto;\">“一切皆Socket！”</p><p align=\"right\" style=\"line-height: 1.8; margin: 10px auto;\">话虽些许夸张，但是事实也是，现在的网络编程几乎都是用的socket。</p><p align=\"right\" style=\"line-height: 1.8; margin: 10px auto;\">——有感于实际编程和开源项目研究。</p><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与web服务器通信的？当你用QQ聊天时，QQ进程怎么与服务器或你好友所在的QQ进程通信？这些都得靠socket？那什么是socket？socket的类型有哪些？还有socket的基本函数，这些都是本文想介绍的。本文的主要内容如下：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">1、网络中进程之间如何通信？</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">2、Socket是什么？</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3、socket的基本操作</div><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.1、socket()函数</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.2、bind()函数</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.3、listen()、connect()函数</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.4、accept()函数</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.5、read()、write()函数等</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">3.6、close()函数</div></li></ul></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">4、socket中TCP的三次握手建立连接详解</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">5、socket中TCP的四次握手释放连接详解</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">6、一个例子（实践一下）</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">7、留下一个问题，欢迎大家回帖回答！！！</li></ul><h1 align=\"justify\" style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">1、网络中进程之间如何通信？</h1><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">消息传递（管道、FIFO、消息队列）</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">共享内存（匿名的和具名的）</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"justify\">远程过程调用（Solaris门和Sun RPC）</div></li></ul><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。其实TCP/IP协议族已经帮我们解决了这个问题，<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">网络层的“<strong>ip地址</strong>”</span>可以唯一标识网络中的主机，而<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">传输层的“<strong>协议+端口</strong>”</span>可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX&nbsp; BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说“一切皆socket”。</p><h1 align=\"justify\" style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">2、什么是Socket？</h1><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">上面我们已经知道网络中的进程是通过socket来通信的，那什么是socket呢？socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。我的理解就是Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭），这些函数我们在后面进行介绍。</p><blockquote style=\"background-image: url(file:///Applications/Quiver.app/Contents/Resources/dist/images/bq.gif); border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239); padding-right: 0px; padding-left: 45px; margin-right: auto; margin-left: auto; color: rgb(102, 102, 102); font-size: 13px; width: 1003.5px; background-position: left top; background-repeat: no-repeat no-repeat;\"><h3 align=\"justify\" style=\"font-size: 16px; line-height: 1.5; margin: 10px 0px;\">socket一词的起源</h3><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">在组网领域的首次使用是在1970年2月12日发布的文献<a href=\"http://datatracker.ietf.org/doc/rfc33/\" target=\"_blank\" style=\"outline: none; text-decoration: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\">IETF RFC33</a>中发现的，撰写者为Stephen Carr、Steve Crocker和Vint Cerf。根据美国计算机历史博物馆的记载，Croker写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。”计算机历史博物馆补充道：“这比BSD的套接字接口定义早了大约12年。”</p></blockquote><h1 align=\"justify\" style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">3、socket的基本操作</h1><p align=\"justify\" style=\"line-height: 1.8; margin: 10px auto;\">既然socket是“open—write/read—close”模式的一种实现，那么socket就提供了这些操作对应的函数接口。下面以TCP为例，介绍几个基本的socket接口函数。</p><h2 align=\"justify\" style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.1、socket()函数</h2><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">int</span> <span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\"><strong>socket</strong></span>(<span style=\"color: rgb(0, 0, 255);\">int</span> domain, <span style=\"color: rgb(0, 0, 255);\">int</span> type, <span style=\"color: rgb(0, 0, 255);\">int</span> protocol);</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\"><strong>socket()</strong></span>用于创建一个socket描述符（socket descriptor），它唯一标识一个socket。这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p><p style=\"line-height: 1.8; margin: 10px auto;\">正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">domain：即协议域，又称为协议族（family）。常用的协议族有，<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">AF_INET</span>、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">AF_INET6</span>、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">AF_LOCAL</span>（或称<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">AF_UNIX</span>，Unix域socket）、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">AF_ROUTE</span>等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">type：指定socket类型。常用的socket类型有，<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">SOCK_STREAM</span>、<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">SOCK_DGRAM</span>、<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">SOCK_RAW</span>、<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">SOCK_PACKET</span>、<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">SOCK_SEQPACKET</span>等等（socket的类型有哪些？）。</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">protocol：故名思意，就是指定协议。常用的协议有，<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">IPPROTO_TCP</span>、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">IPPTOTO_UDP</span>、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">IPPROTO_SCTP</span>、<span color=\"#d16349\" style=\"color: rgb(209, 99, 73);\">IPPROTO_TIPC</span>等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议（这个协议我将会单独开篇讨论！）。</li></ul><p style=\"line-height: 1.8; margin: 10px auto;\">注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p><p style=\"line-height: 1.8; margin: 10px auto;\">当我们调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\"><strong>socket</strong></span>创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">bind()</span>函数，否则就当调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">connect()</span>、<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">listen()</span>时系统会自动随机分配一个端口。</p><h2 style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.2、bind()函数</h2><p style=\"line-height: 1.8; margin: 10px auto;\">正如上面所说bind()函数把一个地址族中的特定地址赋给socket。例如对应<span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">AF_INET</span>、<span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">AF_INET6</span>就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">int</span> <span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">bind</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr *addr, socklen_t addrlen);</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">函数的三个参数分别为：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。<span color=\"#d16349\" size=\"2\" style=\"color: rgb(209, 99, 73); font-size: x-small;\">bind</span>()函数就是将给这个描述字绑定一个名字。</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">addr：一个<span style=\"color: rgb(0, 0, 255);\">const</span>&nbsp;<span style=\"color: rgb(0, 0, 255);\">struct</span>&nbsp;sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是：&nbsp;<br><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr_in {\n    sa_family_t    sin_family; <span style=\"color: rgb(0, 128, 0);\">/* address family: AF_INET */</span>\n    in_port_t      sin_port;   <span style=\"color: rgb(0, 128, 0);\">/* port in network byte order */</span>\n    <span style=\"color: rgb(0, 0, 255);\">struct</span> in_addr sin_addr;   <span style=\"color: rgb(0, 128, 0);\">/* internet address */</span>\n};\n\n<span style=\"color: rgb(0, 128, 0);\">/* Internet address. */</span>\n<span style=\"color: rgb(0, 0, 255);\">struct</span> in_addr {\n    uint32_t       s_addr;     <span style=\"color: rgb(0, 128, 0);\">/* address in network byte order */</span>\n};</pre></div>ipv6对应的是：&nbsp;<br><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr_in6 { \n    sa_family_t     <span style=\"color: rgb(0, 0, 255);\">sin</span>6_family;   <span style=\"color: rgb(0, 128, 0);\">/* AF_INET6 */</span> \n    in_port_t       <span style=\"color: rgb(0, 0, 255);\">sin</span>6_port;     <span style=\"color: rgb(0, 128, 0);\">/* port number */</span> \n    uint32_t        <span style=\"color: rgb(0, 0, 255);\">sin</span>6_flowinfo; <span style=\"color: rgb(0, 128, 0);\">/* IPv6 flow information */</span> \n    <span style=\"color: rgb(0, 0, 255);\">struct</span> in6_addr <span style=\"color: rgb(0, 0, 255);\">sin</span>6_addr;     <span style=\"color: rgb(0, 128, 0);\">/* IPv6 address */</span> \n    uint32_t        <span style=\"color: rgb(0, 0, 255);\">sin</span>6_scope_id; <span style=\"color: rgb(0, 128, 0);\">/* Scope ID (new in 2.4) */</span> \n};\n\n<span style=\"color: rgb(0, 0, 255);\">struct</span> in6_addr { \n    <span style=\"color: rgb(0, 0, 255);\">unsigned</span> <span style=\"color: rgb(0, 0, 255);\">char</span>   s6_addr[16];   <span style=\"color: rgb(0, 128, 0);\">/* IPv6 address */</span> \n};</pre></div>Unix域对应的是：&nbsp;<br><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\">#define UNIX_PATH_MAX    108\n\n<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr_un { \n    sa_family_t sun_family;               <span style=\"color: rgb(0, 128, 0);\">/* AF_UNIX */</span> \n    <span style=\"color: rgb(0, 0, 255);\">char</span>        sun_path[UNIX_PATH_MAX];  <span style=\"color: rgb(0, 128, 0);\">/* pathname */</span> \n};</pre></div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">addrlen：对应的是地址的长度。</li></ul><p style=\"line-height: 1.8; margin: 10px auto;\">通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。这就是为什么通常服务器端在listen之前会调用<span color=\"#d16349\" size=\"2\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: x-small;\">bind</span>()，而客户端就不会调用，而是在<span color=\"#d16349\" size=\"2\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: x-small;\">connect</span>()时由系统随机生成一个。</p><blockquote style=\"background-image: url(file:///Applications/Quiver.app/Contents/Resources/dist/images/bq.gif); border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239); padding-right: 0px; padding-left: 45px; margin-right: auto; margin-left: auto; color: rgb(102, 102, 102); font-size: 13px; width: 1003.5px; background-position: left top; background-repeat: no-repeat no-repeat;\"><h3 style=\"font-size: 16px; line-height: 1.5; margin: 10px 0px;\">网络字节序与主机字节序</h3><p style=\"line-height: 1.8; margin: 10px auto;\"><strong><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">主机字节序</span></strong>就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的Big-Endian和Little-Endian的定义如下：</p><p style=\"line-height: 1.8; margin: 10px auto;\">　　a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p><p style=\"line-height: 1.8; margin: 10px auto;\">　　b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p><p style=\"line-height: 1.8; margin: 10px auto;\"><strong><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">网络字节序</span></strong>：4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。这种传输次序称作大端字节序。<strong>由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。</strong>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p><p style=\"line-height: 1.8; margin: 10px auto;\"><span color=\"#ff0000\" size=\"3\" style=\"line-height: 1.8; color: rgb(255, 0, 0); font-size: small;\">所以</span>：在将一个地址绑定到socket的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是Big-Endian。由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给socket。</p></blockquote><h2 style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.3、listen()、connect()函数</h2><p style=\"line-height: 1.8; margin: 10px auto;\">如果作为一个服务器，在调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">socket()</span>、<span size=\"3\" style=\"line-height: 1.8; font-size: small;\"><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">bind</span><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">()</span></span>之后就会调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">listen()</span>来监听这个socket，如果客户端这时调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">connect()</span>发出连接请求，服务器端就会接收到这个请求。</p><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">int</span> <span color=\"#f3a447\" size=\"3\" style=\"color: rgb(243, 164, 71); font-size: small;\">listen</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">int</span> backlog);\n<span style=\"color: rgb(0, 0, 255);\">int</span> <span color=\"#f3a447\" size=\"3\" style=\"color: rgb(243, 164, 71); font-size: small;\">connect</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr *addr, socklen_t addrlen);</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的最大连接个数。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为被动类型的，等待客户的连接请求。</p><p style=\"line-height: 1.8; margin: 10px auto;\">connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。</p><h2 style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.4、accept()函数</h2><p style=\"line-height: 1.8; margin: 10px auto;\">TCP服务器端依次调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">socket()</span>、<span size=\"3\" style=\"line-height: 1.8; font-size: small;\"><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">bind</span><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">()</span></span>、<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">listen()</span>之后，就会监听指定的socket地址了。TCP客户端依次调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">socket()</span>、<span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\"><span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; font-size: small;\">connect()</span></span>之后就想TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用<span size=\"2\" style=\"line-height: 1.8; font-size: x-small;\"><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">accept</span><span color=\"#d16349\" style=\"line-height: 1.8; color: rgb(209, 99, 73);\">()</span></span>函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。</p><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: rgb(0, 0, 255);\">int</span> <span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">accept</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr *addr, socklen_t *addrlen);</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">accept函数的第一个参数为服务器的socket描述字，第二个参数为指向<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span>&nbsp;sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果accpet成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的TCP连接。</p><p style=\"line-height: 1.8; margin: 10px auto;\"><span color=\"#ff0000\" size=\"2\" style=\"line-height: 1.8; color: rgb(255, 0, 0); font-size: x-small;\">注意</span>：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为<span color=\"#d16349\" size=\"2\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: x-small;\">监听socket描述字</span>；而accept函数返回的是<span color=\"#d16349\" size=\"2\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: x-small;\">已连接的socket描述字</span>。一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p><h2 style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.5、read()、write()等函数</h2><p style=\"line-height: 1.8; margin: 10px auto;\">万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信！网络I/O操作有下面几组：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">read()/write()</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">recv()/send()</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">readv()/writev()</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><span color=\"#ff0000\" size=\"3\" style=\"color: rgb(255, 0, 0); font-size: small;\">recvmsg()/sendmsg()</span></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">recvfrom()/sendto()</li></ul><p style=\"line-height: 1.8; margin: 10px auto;\">我推荐使用<span color=\"#ff0000\" size=\"3\" style=\"line-height: 1.8; color: rgb(255, 0, 0); font-size: small;\">recvmsg()/sendmsg()</span>函数，这两个函数是最通用的I/O函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：</p><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\">       #include &lt;unistd.h&gt;\n\n       ssize_t <span style=\"color: rgb(0, 0, 255);\">read</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> fd, <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t count);\n       ssize_t <span style=\"color: rgb(0, 0, 255);\">write</span>(<span style=\"color: rgb(0, 0, 255);\">int</span> fd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t count);\n\n       #include &lt;sys/types.h&gt;\n       #include &lt;sys/socket.h&gt;\n\n       ssize_t send(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t len, <span style=\"color: rgb(0, 0, 255);\">int</span> flags);\n       ssize_t recv(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t len, <span style=\"color: rgb(0, 0, 255);\">int</span> flags);\n\n       ssize_t sendto(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t len, <span style=\"color: rgb(0, 0, 255);\">int</span> flags,\n                      <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr *dest_addr, socklen_t addrlen);\n       ssize_t recvfrom(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">void</span> *buf, size_t len, <span style=\"color: rgb(0, 0, 255);\">int</span> flags,\n                        <span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr *src_addr, socklen_t *addrlen);\n\n       ssize_t sendmsg(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">struct</span> msghdr *msg, <span style=\"color: rgb(0, 0, 255);\">int</span> flags);\n       ssize_t recvmsg(<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd, <span style=\"color: rgb(0, 0, 255);\">struct</span> msghdr *msg, <span style=\"color: rgb(0, 0, 255);\">int</span> flags);\n</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">read函数是负责从fd中读取内容.当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。</p><p style=\"line-height: 1.8; margin: 10px auto;\">write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数。失败时返回-1，并设置errno变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1)write的返回值大于0，表示写了部分或者是全部的数据。2)返回的值小于0，此时出现了错误。我们要根据错误类型来处理。如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接)。</p><p style=\"line-height: 1.8; margin: 10px auto;\">其它的我就不一一介绍这几对I/O函数了，具体参见man文档或者baidu、Google，下面的例子中将使用到send/recv。</p><h2 style=\"font-size: 21px; letter-spacing: -1px; background-image: none; margin: 10px 0px; padding: 6px 0px; line-height: 1.5; background-position: left bottom; background-repeat: repeat no-repeat;\">3.6、close()函数</h2><p style=\"line-height: 1.8; margin: 10px auto;\">在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。</p><div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word;\">#include &lt;unistd.h&gt;\n<span style=\"color: rgb(0, 0, 255);\">int</span> <span style=\"color: rgb(0, 0, 255);\"><span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">close</span></span>(<span style=\"color: rgb(0, 0, 255);\">int</span> fd);</pre></div><p style=\"line-height: 1.8; margin: 10px auto;\">close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。</p><p style=\"line-height: 1.8; margin: 10px auto;\">注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。</p><h1 style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">4、socket中TCP的三次握手建立连接详解</h1><p style=\"line-height: 1.8; margin: 10px auto;\">我们知道tcp建立连接要进行“三次握手”，即交换三个分组。大致流程如下：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">客户端向服务器发送一个SYN J</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1</li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\">客户端再想服务器发一个确认ACK K+1</li></ul><p style=\"line-height: 1.8; margin: 10px auto;\">只有就完了三次握手，但是这个三次握手发生在socket的那几个函数中呢？请看下图：</p><p style=\"line-height: 1.8; margin: 10px auto;\"><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png\" style=\"outline: none; text-decoration: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"quiver-image-url/0752AEA196A688E88D27852BBF980990.png\" width=\"436\" height=\"229\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-top: 0px;\"></a></p><p align=\"center\" style=\"line-height: 1.8; margin: 10px auto;\">图1、socket中发送的TCP三次握手</p><p align=\"left\" style=\"line-height: 1.8; margin: 10px auto;\">从图中可以看出，当客户端调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">connect</span>时，触发了连接请求，向服务器发送了SYN J包，这时connect进入阻塞状态；服务器监听到连接请求，即收到SYN J包，调用<span color=\"#d16349\" size=\"3\" style=\"line-height: 1.8; color: rgb(209, 99, 73); font-size: small;\">accept</span>函数接收请求向客户端发送SYN K ，ACK J+1，这时accept进入阻塞状态；客户端收到服务器的SYN K ，ACK J+1之后，这时connect返回，并对SYN K进行确认；服务器收到ACK K+1时，accept返回，至此三次握手完毕，连接建立。</p><blockquote style=\"background-image: url(file:///Applications/Quiver.app/Contents/Resources/dist/images/bq.gif); border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239); padding-right: 0px; padding-left: 45px; margin-right: auto; margin-left: auto; color: rgb(102, 102, 102); font-size: 13px; width: 1003.5px; background-position: left top; background-repeat: no-repeat no-repeat;\"><p align=\"left\" style=\"line-height: 1.8; margin: 10px auto;\">总结：客户端的connect在三次握手的第二个次返回，而服务器端的accept在三次握手的第三次返回。</p></blockquote><h1 style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">5、socket中TCP的四次握手释放连接详解</h1><p style=\"line-height: 1.8; margin: 10px auto;\">上面介绍了socket中TCP的三次握手建立过程，及其涉及的socket函数。现在我们介绍socket中的四次握手释放连接的过程，请看下图：</p><p style=\"line-height: 1.8; margin: 10px auto;\"><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png\" style=\"outline: none; text-decoration: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"quiver-image-url/6BEA7393F2F8BE4A8E2B1D36CB31B95E.png\" width=\"366\" height=\"229\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-top: 0px;\"></a></p><p align=\"center\" style=\"line-height: 1.8; margin: 10px auto;\">图2、socket中发送的TCP四次握手</p><p align=\"left\" style=\"line-height: 1.8; margin: 10px auto;\">图示过程如下：</p><ul style=\"list-style: none; margin: 10px 10px 10px 30px; padding: 0px;\"><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"left\">某个应用进程首先调用<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">close</span>主动关闭连接，这时TCP发送一个FIN M；</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"left\">另一端接收到FIN M之后，执行被动关闭，对这个FIN进行确认。它的接收也作为文件结束符传递给应用进程，因为FIN的接收意味着应用进程在相应的连接上再也接收不到额外数据；</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"left\">一段时间之后，接收到文件结束符的应用进程调用<span color=\"#d16349\" size=\"3\" style=\"color: rgb(209, 99, 73); font-size: small;\">close</span>关闭它的socket。这导致它的TCP也发送一个FIN N；</div></li><li style=\"background-image: url(&quot;images/icon_miniarrow.gif&quot;); background-position: 0px 9px; background-repeat: no-repeat; padding: 0px 0px 0px 15px; list-style-type: disc;\"><div align=\"left\">接收到这个FIN的源发送端TCP对它进行确认。</div></li></ul><p align=\"left\" style=\"line-height: 1.8; margin: 10px auto;\">这样每个方向上都有一个FIN和ACK。</p><h1 align=\"left\" style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">6、一个例子（实践一下）</h1><p style=\"line-height: 1.8; margin: 10px auto;\">说了这么多了，动手实践一下。下面编写一个简单的服务器、客户端（使用TCP）——服务器端一直监听本机的6666号端口，如果收到连接请求，将接收请求并接收客户端发来的消息；客户端与服务器端建立连接并发送一条消息。</p><p style=\"line-height: 1.8; margin: 10px auto;\">服务器端代码：</p><div class=\"cnblogs_code\" style=\"background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; color: rgb(0, 0, 0); font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><img src=\"quiver-image-url/405B18B4B6584AE338E0F6ECAF736533.gif\" class=\"code_img_opened\" id=\"code_img_opened_420160b6-a157-40d3-98f4-f55288ca1293\" style=\"border: 0px; vertical-align: middle; padding-right: 5px; max-width: 900px;\"><div id=\"cnblogs_code_open_420160b6-a157-40d3-98f4-f55288ca1293\" class=\"cnblogs_code_hide\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"outline: none; color: rgb(61, 129, 238); border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border-width: initial !important; border-style: none !important; border-color: rgb(221, 221, 221); border-image: initial !important; background-color: rgb(255, 255, 255); max-width: 900px;\"></a></span></div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word; max-width: 600px; font-family: 'Courier New' !important;\"><span style=\"line-height: 1.5 !important;\">#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">stdio.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">stdlib.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">string</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">errno.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">types.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">socket.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">netinet</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">in</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\"> MAXLINE 4096</span><span style=\"line-height: 1.5 !important;\"><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\"> main(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\"> argc, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">**</span><span style=\"line-height: 1.5 !important;\"> argv)<br>{<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">    listenfd, connfd;<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\"> sockaddr_in     servaddr;<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">    buff[</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">4096</span><span style=\"line-height: 1.5 !important;\">];<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">     n;<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( (listenfd </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> socket(AF_INET, SOCK_STREAM, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">)) </span><span style=\"line-height: 1.5 !important;\">==</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"line-height: 1.5 !important;\">-</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\"> ){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">create socket error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,strerror(errno),errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    memset(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">servaddr, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(servaddr));<br>    servaddr.sin_family </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> AF_INET;<br>    servaddr.sin_addr.s_addr </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> htonl(INADDR_ANY);<br>    servaddr.sin_port </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> htons(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">6666</span><span style=\"line-height: 1.5 !important;\">);<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( bind(listenfd, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\"> sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">servaddr, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(servaddr)) </span><span style=\"line-height: 1.5 !important;\">==</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"line-height: 1.5 !important;\">-</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">bind socket error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,strerror(errno),errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( listen(listenfd, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">10</span><span style=\"line-height: 1.5 !important;\">) </span><span style=\"line-height: 1.5 !important;\">==</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"line-height: 1.5 !important;\">-</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">listen socket error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,strerror(errno),errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">======waiting for client's request======\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">);<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">while</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">){<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( (connfd </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> accept(listenfd, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\"> sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)NULL, NULL)) </span><span style=\"line-height: 1.5 !important;\">==</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"line-height: 1.5 !important;\">-</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">){<br>        printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">accept socket error: %s(errno: %d)</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,strerror(errno),errno);<br>        </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">continue</span><span style=\"line-height: 1.5 !important;\">;<br>    }<br>    n </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> recv(connfd, buff, MAXLINE, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    buff[n] </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">'</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\\0</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">'</span><span style=\"line-height: 1.5 !important;\">;<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">recv msg from client: %s\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">, buff);<br>    close(connfd);<br>    }<br><br>    close(listenfd);<br>}</span></pre><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"outline: none; color: rgb(61, 129, 238); border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border-width: initial !important; border-style: none !important; border-color: rgb(221, 221, 221); border-image: initial !important; background-color: rgb(255, 255, 255); max-width: 900px;\"></a></span></div></div></div><p style=\"line-height: 1.8; margin: 10px auto;\">客户端代码：</p><div class=\"cnblogs_code\" style=\"background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; color: rgb(0, 0, 0); font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><img src=\"quiver-image-url/405B18B4B6584AE338E0F6ECAF736533.gif\" class=\"code_img_opened\" id=\"code_img_opened_a1802b54-e3cd-46e7-b4e5-04efb8c233d2\" style=\"border: 0px; vertical-align: middle; padding-right: 5px; max-width: 900px;\"><div id=\"cnblogs_code_open_a1802b54-e3cd-46e7-b4e5-04efb8c233d2\" class=\"cnblogs_code_hide\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"outline: none; color: rgb(61, 129, 238); border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border-width: initial !important; border-style: none !important; border-color: rgb(221, 221, 221); border-image: initial !important; background-color: rgb(255, 255, 255); max-width: 900px;\"></a></span></div><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word; max-width: 600px; font-family: 'Courier New' !important;\"><span style=\"line-height: 1.5 !important;\">#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">stdio.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">stdlib.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">string</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">errno.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">types.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">socket.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">netinet</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">in</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\"> MAXLINE 4096</span><span style=\"line-height: 1.5 !important;\"><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\"> main(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\"> argc, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">**</span><span style=\"line-height: 1.5 !important;\"> argv)<br>{<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">    sockfd, n;<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">    recvline[</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">4096</span><span style=\"line-height: 1.5 !important;\">], sendline[</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">4096</span><span style=\"line-height: 1.5 !important;\">];<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\"> sockaddr_in    servaddr;<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( argc </span><span style=\"line-height: 1.5 !important;\">!=</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">2</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">usage: ./client &lt;ipaddress&gt;\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( (sockfd </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> socket(AF_INET, SOCK_STREAM, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">)) </span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">create socket error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">, strerror(errno),errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    memset(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">servaddr, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(servaddr));<br>    servaddr.sin_family </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> AF_INET;<br>    servaddr.sin_port </span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\"> htons(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">6666</span><span style=\"line-height: 1.5 !important;\">);<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( inet_pton(AF_INET, argv[</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">], </span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">servaddr.sin_addr) </span><span style=\"line-height: 1.5 !important;\">&lt;=</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">inet_pton error for %s\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,argv[</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">]);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( connect(sockfd, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\"> sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">servaddr, </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(servaddr)) </span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">){<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">connect error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">,strerror(errno),errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">send msg to server: \\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">);<br>    fgets(sendline, </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">4096</span><span style=\"line-height: 1.5 !important;\">, stdin);<br>    </span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">( send(sockfd, sendline, strlen(sendline), </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">) </span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\"> </span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">)<br>    {<br>    printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">send msg error: %s(errno: %d)\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">, strerror(errno), errno);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>    }<br><br>    close(sockfd);<br>    exit(</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>}</span></pre><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"outline: none; color: rgb(61, 129, 238); border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border-width: initial !important; border-style: none !important; border-color: rgb(221, 221, 221); border-image: initial !important; background-color: rgb(255, 255, 255); max-width: 900px;\"></a></span></div></div></div><p style=\"line-height: 1.8; margin: 10px auto;\">当然上面的代码很简单，也有很多缺点，这就只是简单的演示socket的基本函数使用。其实不管有多复杂的网络程序，都使用的这些基本函数。上面的服务器使用的是迭代模式的，即只有处理完一个客户端请求才会去处理下一个客户端的请求，这样的服务器处理能力是很弱的，现实中的服务器都需要有并发处理能力！为了需要并发处理，服务器需要fork()一个新的进程或者线程去处理请求等，子进程可以拿到父进程与客户端建立连接的socket信息。</p><h1 style=\"font-size: 28px; line-height: 1.5; margin: 10px 0px;\">7、动动手</h1><p style=\"line-height: 1.8; margin: 10px auto;\">留下一个问题，欢迎大家回帖回答！！！是否熟悉Linux下网络编程？如熟悉，编写如下程序完成如下功能：</p><p style=\"line-height: 1.8; margin: 10px auto;\">服务器端：</p><p style=\"line-height: 1.8; margin: 10px auto;\">接收地址192.168.100.2的客户端信息，<a name=\"OLE_LINK3\" style=\"outline: none; border-bottom-width: 1px; border-bottom-style: dashed;\"></a>如信息为“Client Query”，则打印“Receive Query”</p><p style=\"line-height: 1.8; margin: 10px auto;\">客户端：</p><p style=\"line-height: 1.8; margin: 10px auto;\">向地址192.168.100.168的服务器端顺序发送信息“Client Query test”，“Cleint Query”，“Client Query Quit”，然后退出。</p><p style=\"line-height: 1.8; margin: 10px auto;\">题目中出现的ip地址可以根据实际情况定。</p><p align=\"right\" style=\"line-height: 1.8; margin: 10px auto;\">——本文只是介绍了简单的socket编程。</p><p align=\"right\" style=\"line-height: 1.8; margin: 10px auto;\">更为复杂的需要自己继续深入。</p><h4 align=\"justify\" style=\"margin: 10px 0px;\"><a href=\"http://www.cnblogs.com/skynet/archive/2010/12/04/1881236.html\" style=\"outline: none; text-decoration: none; color: rgb(61, 129, 238);\">（unix domain socket）使用udp发送&gt;=128K的消息会报ENOBUFS的错误</a>（一个实际socket编程中遇到的问题，希望对你有帮助）</h4><div><br></div></div><div id=\"MySignature\" style=\"font-family: Georgia, 'Times New Roman', Times, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"></div>"
    }
  ]
}
{
  "title": "Mysql死锁排查过程",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"post-body\" itemprop=\"articleBody\" style=\"font-family: Lato, 'PingFang SC', 'Microsoft YaHei', sans-serif; text-align: justify; color: rgb(85, 85, 85); font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><h2 id=\"背景\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\">背景</h2><p style=\"margin: 0px 0px 25px;\">以前接触到的数据库死锁，都是批量更新时加锁顺序不一致而导致的死锁，但是上周却遇到了一个很难理解的死锁。借着这个机会又重新学习了一下mysql的死锁知识以及常见的死锁场景。在多方调研以及和同事们的讨论下终于发现了这个死锁问题的成因，收获颇多。虽然是后端程序员，我们不需要像DBA一样深入地去分析与锁相关的源码，但是如果我们能够掌握基本的死锁排查方法，对我们的日常开发还是大有裨益的。</p><p style=\"margin: 0px 0px 25px;\">PS：本文不会介绍死锁的基本知识，mysql的加锁原理可以参考本文的参考资料提供的链接。</p><h2 id=\"死锁起因\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#死锁起因\" class=\"headerlink\" title=\"死锁起因\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>死锁起因</h2><p style=\"margin: 0px 0px 25px;\">先介绍一下数据库和表情况，因为涉及到公司内部真实的数据，所以以下都做了模拟，不会影响具体的分析。</p><p style=\"margin: 0px 0px 25px;\">我们采用的是5.5版本的mysql数据库，事务隔离级别是默认的RR（Repeatable-Read），采用innodb引擎。假设存在test表：</p><figure class=\"highlight plain\" style=\"margin: 20px 0px; overflow: auto; padding: 0px; font-size: 13px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; width: auto; border: none; font-size: 14px; table-layout: fixed;\"><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td class=\"gutter\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; color: rgb(134, 145, 148); background-color: rgb(239, 242, 243); line-height: 1.6; border: none; text-align: right; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">1</div><div class=\"line\" style=\"height: 20px;\">2</div><div class=\"line\" style=\"height: 20px;\">3</div><div class=\"line\" style=\"height: 20px;\">4</div><div class=\"line\" style=\"height: 20px;\">5</div><div class=\"line\" style=\"height: 20px;\">6</div></pre></td><td class=\"code\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; background-color: rgb(247, 247, 247); line-height: 1.6; border: none; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">CREATE TABLE `test` (</div><div class=\"line\" style=\"height: 20px;\">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class=\"line\" style=\"height: 20px;\">  `a` int(11) unsigned DEFAULT NULL,</div><div class=\"line\" style=\"height: 20px;\">  PRIMARY KEY (`id`),</div><div class=\"line\" style=\"height: 20px;\">  UNIQUE KEY `a` (`a`)</div><div class=\"line\" style=\"height: 20px;\">) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;</div></pre></td></tr></tbody></table></figure><p style=\"margin: 0px 0px 25px;\">表的结构很简单，一个主键id，另一个唯一索引a。表里的数据如下：</p><figure class=\"highlight plain\" style=\"margin: 20px 0px; overflow: auto; padding: 0px; font-size: 13px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; width: auto; border: none; font-size: 14px; table-layout: fixed;\"><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td class=\"gutter\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; color: rgb(134, 145, 148); background-color: rgb(239, 242, 243); line-height: 1.6; border: none; text-align: right; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">1</div><div class=\"line\" style=\"height: 20px;\">2</div><div class=\"line\" style=\"height: 20px;\">3</div><div class=\"line\" style=\"height: 20px;\">4</div><div class=\"line\" style=\"height: 20px;\">5</div><div class=\"line\" style=\"height: 20px;\">6</div><div class=\"line\" style=\"height: 20px;\">7</div><div class=\"line\" style=\"height: 20px;\">8</div><div class=\"line\" style=\"height: 20px;\">9</div></pre></td><td class=\"code\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; background-color: rgb(247, 247, 247); line-height: 1.6; border: none; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">mysql&gt; select * from test;</div><div class=\"line\" style=\"height: 20px;\">+----+------+</div><div class=\"line\" style=\"height: 20px;\">| id | a    |</div><div class=\"line\" style=\"height: 20px;\">+----+------+</div><div class=\"line\" style=\"height: 20px;\">|  1 |    1 |</div><div class=\"line\" style=\"height: 20px;\">|  2 |    2 |</div><div class=\"line\" style=\"height: 20px;\">|  4 |    4 |</div><div class=\"line\" style=\"height: 20px;\">+----+------+</div><div class=\"line\" style=\"height: 20px;\">3 rows in set (0.00 sec)</div></pre></td></tr></tbody></table></figure><p style=\"margin: 0px 0px 25px;\">出现死锁的操作如下：</p><table style=\"margin: 20px 0px; width: 619px; border: 1px solid rgb(221, 221, 221); font-size: 14px; table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">步骤</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务1</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务2</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">1</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">2</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2;</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">3</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">4</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2; （事务1卡住）</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">5</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">提示出现死锁：ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">insert into test (id, a) values (10, 2);</td></tr></tbody></table><a id=\"more\" style=\"background-color: transparent; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(153, 153, 153); word-wrap: break-word;\"></a><p style=\"margin: 0px 0px 25px;\">然后我们可以通过<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">SHOW ENGINE INNODB STATUS;</code>来查看死锁日志：</p><figure class=\"highlight plain\" style=\"margin: 20px 0px; overflow: auto; padding: 0px; font-size: 13px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; width: auto; border: none; font-size: 14px; table-layout: fixed;\"><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td class=\"gutter\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; color: rgb(134, 145, 148); background-color: rgb(239, 242, 243); line-height: 1.6; border: none; text-align: right; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">1</div><div class=\"line\" style=\"height: 20px;\">2</div><div class=\"line\" style=\"height: 20px;\">3</div><div class=\"line\" style=\"height: 20px;\">4</div><div class=\"line\" style=\"height: 20px;\">5</div><div class=\"line\" style=\"height: 20px;\">6</div><div class=\"line\" style=\"height: 20px;\">7</div><div class=\"line\" style=\"height: 20px;\">8</div><div class=\"line\" style=\"height: 20px;\">9</div><div class=\"line\" style=\"height: 20px;\">10</div><div class=\"line\" style=\"height: 20px;\">11</div><div class=\"line\" style=\"height: 20px;\">12</div><div class=\"line\" style=\"height: 20px;\">13</div><div class=\"line\" style=\"height: 20px;\">14</div><div class=\"line\" style=\"height: 20px;\">15</div><div class=\"line\" style=\"height: 20px;\">16</div><div class=\"line\" style=\"height: 20px;\">17</div><div class=\"line\" style=\"height: 20px;\">18</div><div class=\"line\" style=\"height: 20px;\">19</div><div class=\"line\" style=\"height: 20px;\">20</div><div class=\"line\" style=\"height: 20px;\">21</div><div class=\"line\" style=\"height: 20px;\">22</div><div class=\"line\" style=\"height: 20px;\">23</div><div class=\"line\" style=\"height: 20px;\">24</div><div class=\"line\" style=\"height: 20px;\">25</div><div class=\"line\" style=\"height: 20px;\">26</div><div class=\"line\" style=\"height: 20px;\">27</div><div class=\"line\" style=\"height: 20px;\">28</div><div class=\"line\" style=\"height: 20px;\">29</div><div class=\"line\" style=\"height: 20px;\">30</div><div class=\"line\" style=\"height: 20px;\">31</div><div class=\"line\" style=\"height: 20px;\">32</div><div class=\"line\" style=\"height: 20px;\">33</div><div class=\"line\" style=\"height: 20px;\">34</div><div class=\"line\" style=\"height: 20px;\">35</div></pre></td><td class=\"code\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; background-color: rgb(247, 247, 247); line-height: 1.6; border: none; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">------------------------</div><div class=\"line\" style=\"height: 20px;\">LATEST DETECTED DEADLOCK</div><div class=\"line\" style=\"height: 20px;\">------------------------</div><div class=\"line\" style=\"height: 20px;\">170219 13:31:31</div><div class=\"line\" style=\"height: 20px;\">*** (1) TRANSACTION:</div><div class=\"line\" style=\"height: 20px;\">TRANSACTION 2A8BD, ACTIVE 11 sec starting index read</div><div class=\"line\" style=\"height: 20px;\">mysql tables in use 1, locked 1</div><div class=\"line\" style=\"height: 20px;\">LOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)</div><div class=\"line\" style=\"height: 20px;\">MySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating</div><div class=\"line\" style=\"height: 20px;\">delete from test where a = 2</div><div class=\"line\" style=\"height: 20px;\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BD lock_mode X waiting</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"></div><div class=\"line\" style=\"height: 20px;\">*** (2) TRANSACTION:</div><div class=\"line\" style=\"height: 20px;\">TRANSACTION 2A8BC, ACTIVE 18 sec inserting</div><div class=\"line\" style=\"height: 20px;\">mysql tables in use 1, locked 1</div><div class=\"line\" style=\"height: 20px;\">4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2</div><div class=\"line\" style=\"height: 20px;\">MySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update</div><div class=\"line\" style=\"height: 20px;\">insert into test (id,a) values (10,2)</div><div class=\"line\" style=\"height: 20px;\">*** (2) HOLDS THE LOCK(S):</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BC lock_mode X locks rec but not gap</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"></div><div class=\"line\" style=\"height: 20px;\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BC lock mode S waiting</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"></div><div class=\"line\" style=\"height: 20px;\">*** WE ROLL BACK TRANSACTION (1)</div></pre></td></tr></tbody></table></figure><h2 id=\"分析\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#分析\" class=\"headerlink\" title=\"分析\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>分析</h2><h3 id=\"阅读死锁日志\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#阅读死锁日志\" class=\"headerlink\" title=\"阅读死锁日志\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>阅读死锁日志</h3><p style=\"margin: 0px 0px 25px;\">遇到死锁，第一步就是阅读死锁日志。死锁日志通常分为两部分，上半部分说明了事务1在等待什么锁：</p><figure class=\"highlight plain\" style=\"margin: 20px 0px; overflow: auto; padding: 0px; font-size: 13px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; width: auto; border: none; font-size: 14px; table-layout: fixed;\"><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td class=\"gutter\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; color: rgb(134, 145, 148); background-color: rgb(239, 242, 243); line-height: 1.6; border: none; text-align: right; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">1</div><div class=\"line\" style=\"height: 20px;\">2</div><div class=\"line\" style=\"height: 20px;\">3</div><div class=\"line\" style=\"height: 20px;\">4</div><div class=\"line\" style=\"height: 20px;\">5</div><div class=\"line\" style=\"height: 20px;\">6</div><div class=\"line\" style=\"height: 20px;\">7</div><div class=\"line\" style=\"height: 20px;\">8</div><div class=\"line\" style=\"height: 20px;\">9</div><div class=\"line\" style=\"height: 20px;\">10</div><div class=\"line\" style=\"height: 20px;\">11</div><div class=\"line\" style=\"height: 20px;\">12</div></pre></td><td class=\"code\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; background-color: rgb(247, 247, 247); line-height: 1.6; border: none; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">170219 13:31:31</div><div class=\"line\" style=\"height: 20px;\">*** (1) TRANSACTION:</div><div class=\"line\" style=\"height: 20px;\">TRANSACTION 2A8BD, ACTIVE 11 sec starting index read</div><div class=\"line\" style=\"height: 20px;\">mysql tables in use 1, locked 1</div><div class=\"line\" style=\"height: 20px;\">LOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)</div><div class=\"line\" style=\"height: 20px;\">MySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating</div><div class=\"line\" style=\"height: 20px;\">delete from test where a = 2</div><div class=\"line\" style=\"height: 20px;\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BD lock_mode X waiting</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div></pre></td></tr></tbody></table></figure><p style=\"margin: 0px 0px 25px;\">从日志里我们可以看到事务1当前正在执行<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">delete from test where a = 2</code>，该条语句正在申请索引a的X锁，所以提示<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">lock_mode X waiting</code>。</p><p style=\"margin: 0px 0px 25px;\">然后日志的下半部分说明了事务2当前持有的锁以及等待的锁：</p><figure class=\"highlight plain\" style=\"margin: 20px 0px; overflow: auto; padding: 0px; font-size: 13px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; width: auto; border: none; font-size: 14px; table-layout: fixed;\"><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td class=\"gutter\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; color: rgb(134, 145, 148); background-color: rgb(239, 242, 243); line-height: 1.6; border: none; text-align: right; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">1</div><div class=\"line\" style=\"height: 20px;\">2</div><div class=\"line\" style=\"height: 20px;\">3</div><div class=\"line\" style=\"height: 20px;\">4</div><div class=\"line\" style=\"height: 20px;\">5</div><div class=\"line\" style=\"height: 20px;\">6</div><div class=\"line\" style=\"height: 20px;\">7</div><div class=\"line\" style=\"height: 20px;\">8</div><div class=\"line\" style=\"height: 20px;\">9</div><div class=\"line\" style=\"height: 20px;\">10</div><div class=\"line\" style=\"height: 20px;\">11</div><div class=\"line\" style=\"height: 20px;\">12</div><div class=\"line\" style=\"height: 20px;\">13</div><div class=\"line\" style=\"height: 20px;\">14</div><div class=\"line\" style=\"height: 20px;\">15</div><div class=\"line\" style=\"height: 20px;\">16</div><div class=\"line\" style=\"height: 20px;\">17</div></pre></td><td class=\"code\" style=\"padding: 0px; text-align: left; vertical-align: middle; border: none;\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 0px; margin-bottom: 0px; padding: 10px; background-color: rgb(247, 247, 247); line-height: 1.6; border: none; background-position: initial initial; background-repeat: initial initial;\"><div class=\"line\" style=\"height: 20px;\">*** (2) TRANSACTION:</div><div class=\"line\" style=\"height: 20px;\">TRANSACTION 2A8BC, ACTIVE 18 sec inserting</div><div class=\"line\" style=\"height: 20px;\">mysql tables in use 1, locked 1</div><div class=\"line\" style=\"height: 20px;\">4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2</div><div class=\"line\" style=\"height: 20px;\">MySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update</div><div class=\"line\" style=\"height: 20px;\">insert into test (id,a) values (10,2)</div><div class=\"line\" style=\"height: 20px;\">*** (2) HOLDS THE LOCK(S):</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BC lock_mode X locks rec but not gap</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"></div><div class=\"line\" style=\"height: 20px;\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class=\"line\" style=\"height: 20px;\">RECORD LOCKS space id 0 page no 923 n bits 80 index `a` of table `oauthdemo`.`test` trx id 2A8BC lock mode S waiting</div><div class=\"line\" style=\"height: 20px;\">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</div><div class=\"line\" style=\"height: 20px;\"> 0: len 4; hex 00000002; asc     ;;</div><div class=\"line\" style=\"height: 20px;\"> 1: len 4; hex 00000002; asc     ;;</div></pre></td></tr></tbody></table></figure><p style=\"margin: 0px 0px 25px;\">从日志的<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">HOLDS THE LOCKS(S)</code>块中我们可以看到事务2持有索引a的X锁，并且是记录锁（Record Lock）。该锁是通过事务2在步骤2执行的delete语句申请的。由于是RR隔离模式下的基于唯一索引的等值查询（Where a = 2），所以会申请一个记录锁，而非next-key锁。</p><p style=\"margin: 0px 0px 25px;\">从日志的<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">WAITING FOR THIS LOCK TO BE GRANTED</code>块中我们可以看到事务2正在申请S锁，也就是共享锁。该锁是<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">insert into test (id,a) values (10,2)</code>语句申请的。<strong>insert语句在普通情况下是会申请排他锁，也就是X锁，但是这里出现了S锁。这是因为a字段是一个唯一索引，所以insert语句会在插入前进行一次duplicate key的检查，为了使这次检查成功，需要申请S锁防止其他事务对a字段进行修改。</strong></p><p style=\"margin: 0px 0px 25px;\">那么为什么该S锁会失败呢？这是<strong>对同一个字段的锁的申请是需要排队的</strong>。S锁前面还有一个未申请成功的X锁，所以S锁必须等待，所以形成了循环等待，死锁出现了。</p><p style=\"margin: 0px 0px 25px;\">通过阅读死锁日志，我们可以清楚地知道两个事务形成了怎样的循环等待，再加以分析，就可以逆向推断出循环等待的成因，也就是死锁形成的原因。</p><h3 id=\"死锁形成流程图\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#死锁形成流程图\" class=\"headerlink\" title=\"死锁形成流程图\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>死锁形成流程图</h3><p style=\"margin: 0px 0px 25px;\">为了让大家更好地理解死锁形成的原因，我们再通过表格的形式阐述死锁形成的流程：</p><table style=\"margin: 20px 0px; width: 619px; border: 1px solid rgb(221, 221, 221); font-size: 14px; table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">步骤</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务1</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务2</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">1</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">2</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2; 执行成功，事务2占有a=2下的X锁，类型为记录锁。</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">3</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">4</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2; 事务1希望申请a=2下的X锁，但是由于事务2已经申请了一把X锁，两把X锁互斥，所以X锁申请进入锁请求队列。</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">5</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">出现死锁，事务1权重较小，所以被选择回滚（成为牺牲品）。</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">insert into test (id, a) values (10, 2); 由于a字段建立了唯一索引，所以需要申请S锁以便检查duplicate key，由于插入的a的值还是2，所以排在X锁后面。但是前面的X锁的申请只有在事务2commit或者rollback之后才能成功，此时形成了循环等待，死锁产生。</td></tr></tbody></table><h2 id=\"拓展\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#拓展\" class=\"headerlink\" title=\"拓展\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>拓展</h2><p style=\"margin: 0px 0px 25px;\">在排查死锁的过程中，有个同事还发现了上述场景会产生另一种死锁，该场景无法通过手工复现，只有高并发场景下才有可能复现。</p><p style=\"margin: 0px 0px 25px;\">该死锁对应的日志这里就不贴出了，与上一个死锁的核心差别是事务2等待的锁从S锁换成了X锁，也就是<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">lock_mode X locks gap before rec insert intention waiting</code>。我们还是通过表格来详细说明该死锁产生的流程：</p><table style=\"margin: 20px 0px; width: 619px; border: 1px solid rgb(221, 221, 221); font-size: 14px; table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">步骤</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务1</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-right-color: rgb(238, 238, 238);\">事务2</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">1</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">2</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2; 执行成功，事务2占有a=2下的X锁，类型为记录锁。</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">3</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">begin</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">4</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">【insert第1阶段】insert into test (id, a) values (10, 2); 事务2申请S锁进行duplicate key进行检查。检查成功。</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">5</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">delete from test where a = 2; 事务1希望申请a=2下的X锁，但是由于事务2已经申请了一把X锁，两把X锁互斥，所以X锁申请进入锁请求队列。</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">6</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">出现死锁，事务1权重较小，所以被选择回滚（成为牺牲品）。</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-right-color: rgb(238, 238, 238);\">【insert第2阶段】insert into test (id, a) values (10, 2); 事务2开始插入数据，S锁升级为X锁，类型为insert intention。同理，X锁进入队列排队，形成循环等待，死锁产生。</td></tr></tbody></table><h2 id=\"总结\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#总结\" class=\"headerlink\" title=\"总结\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>总结</h2><p style=\"margin: 0px 0px 25px;\">排查死锁时，首先需要根据死锁日志分析循环等待的场景，然后根据当前各个事务执行的SQL分析出加锁类型以及顺序，逆向推断出如何形成循环等待，这样就能找到死锁产生的原因了。</p><p style=\"margin: 0px 0px 25px;\">PS：<strong>上述分析都是基于经验的推断，希望其他小伙伴们能够指出当中的错误以及不足指出，谢谢！</strong></p><h2 id=\"参考资料\" style=\"margin: 20px 0px 15px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.kissyu.org/2017/02/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/#参考资料\" class=\"headerlink\" title=\"参考资料\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\"></a>参考资料</h2><ul><li style=\"list-style: circle;\"><a href=\"http://hedengcheng.com/?p=844\" target=\"_blank\" rel=\"external\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\">【强推】一个最不可思议的Mysql死锁分析</a></li><li style=\"list-style: circle;\"><a href=\"http://hedengcheng.com/?p=771\" target=\"_blank\" rel=\"external\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\">【强推】Mysql加锁处理分析</a></li><li style=\"list-style: circle;\"><a href=\"http://mysqllover.com/?p=411\" target=\"_blank\" rel=\"external\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\">Innodb锁系统之如何阅读死锁日志</a></li><li style=\"list-style: circle;\"><a href=\"http://mysqllover.com/?p=431\" target=\"_blank\" rel=\"external\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\">源码分析insert和delete操作的加锁</a></li><li style=\"list-style: circle;\"><a href=\"https://yq.aliyun.com/articles/40995\" target=\"_blank\" rel=\"external\" style=\"background-color: transparent; color: rgb(85, 85, 85); text-decoration: none; border-bottom: 1px solid rgb(153, 153, 153); word-wrap: break-word;\">Innodb锁相关源码翻译</a></li></ul></div>"
    }
  ]
}
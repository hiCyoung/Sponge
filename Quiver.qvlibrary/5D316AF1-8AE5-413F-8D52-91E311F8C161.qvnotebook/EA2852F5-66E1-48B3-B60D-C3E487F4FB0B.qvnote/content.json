{
  "title": "Mysql常用存储引擎的锁机制",
  "cells": [
    {
      "type": "text",
      "data": "<p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>Mysql<span style=\"font-family: 宋体;\">常用存储引擎的锁机制</span></strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">MyISAM<span style=\"font-family: 宋体;\">和</span><span style=\"font-family: 'Times New Roman';\">MEMORY</span><span style=\"font-family: 宋体;\">采用表级锁（</span><span style=\"font-family: 'Times New Roman';\">table-level&nbsp;locking</span><span style=\"font-family: 宋体;\">）</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">BDB<span style=\"font-family: 宋体;\">采用页面锁（</span><span style=\"font-family: 'Times New Roman';\">page-leve&nbsp;locking</span><span style=\"font-family: 宋体;\">）或表级锁，默认为页面锁</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">InnoDB<span style=\"font-family: 宋体;\">支持行级锁（</span><span style=\"font-family: 'Times New Roman';\">row-level&nbsp;locking</span><span style=\"font-family: 宋体;\">）和表级锁，默认为行级锁</span></span></p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>各种锁特点</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生冲突的概率最高，并发度最低</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">页面锁：开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般</p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>InnoDB<span style=\"font-family: 宋体;\">存储引擎的锁</span></strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">InnoDB<span style=\"font-family: 宋体;\">存储引擎实现了如下两种锁</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">1、共享锁（<span style=\"font-family: 'Times New Roman';\">S&nbsp;Lock</span><span style=\"font-family: 宋体;\">），允许事务读一行数据</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">2、排他锁（<span style=\"font-family: 'Times New Roman';\">X&nbsp;Lock)</span><span style=\"font-family: 宋体;\">，允许事务更新或者删除一行数据</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">共享锁和排他锁的兼容如下图所示</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">&nbsp;<img src=\"quiver-image-url/A6955C30A6D1609C526567D2E14AC4E9.png\" alt=\"\" style=\"border: 0px; height: auto !important;\"></p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>一致性的非锁定读</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">一致性的非锁定行读（<span style=\"font-family: 'Times New Roman';\">consistent&nbsp;nonlocking&nbsp;read</span><span style=\"font-family: 宋体;\">）是指</span><span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">存储引擎通过行多版本控制（</span><span style=\"font-family: 'Times New Roman';\">multi&nbsp;versioning</span><span style=\"font-family: 宋体;\">）的方式来读取当前执行时间数据库中行的数据。如果读取的行正在执行</span><span style=\"font-family: 'Times New Roman';\">DELETE</span><span style=\"font-family: 宋体;\">、</span><span style=\"font-family: 'Times New Roman';\">UPDATE</span><span style=\"font-family: 宋体;\">操作，这是读取操作不会因此而会等待行上锁的释放，相反，</span><span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">会去读取行的一个快照数据。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">之所以称其为非锁定读，因为不需要等待访问的行上<span style=\"font-family: 'Times New Roman';\">X</span><span style=\"font-family: 宋体;\">锁的释放。快照数据是指改行之前版本的数据，该实现是通过</span><span style=\"font-family: 'Times New Roman';\">undo</span><span style=\"font-family: 宋体;\">段来实现的。但是在不同事务隔离级别下，读取的方式不同，并不是每个事务隔离级别下读取的都是一致性读。</span></span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">例如：</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">对于<span style=\"font-family: 'Times New Roman';\">read&nbsp;committed</span><span style=\"font-family: 宋体;\">的事务隔离级别，他总是读取行的最新版本，如果行被锁定了，则读取该行版本的最新一个快照。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">对于<span style=\"font-family: 'Times New Roman';\">repeatable&nbsp;read(innoDB</span><span style=\"font-family: 宋体;\">存储引擎的默认隔离级别</span><span style=\"font-family: 'Times New Roman';\">),</span><span style=\"font-family: 宋体;\">总是读取事务开始时的行数据。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">&nbsp;非锁定读的机制大大提高了数据读取的并发性，在<span style=\"font-family: 'Times New Roman';\">Innodb</span><span style=\"font-family: 宋体;\">存储引擎默认设置下，这是默认的读取方式，但是在某些情况下，可以对读进行加锁，比如：</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">1、显式对读进行加锁，如使用&nbsp;<span style=\"font-family: 'Times New Roman';\">select&nbsp;---&nbsp;for&nbsp;update&nbsp;;select&nbsp;---&nbsp;lock&nbsp;in&nbsp;share&nbsp;mode</span></span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">2、在外键的插入和更新上，因为在外键的插入和更新上，对于数据的隔离性要求较高，在插入前需要扫描父表中的记录是否存在，所以，在外键的插入删除上，<span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">会使用加</span><span style=\"font-family: 'Times New Roman';\">S</span><span style=\"font-family: 宋体;\">锁的方式来实现。</span></span></p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>InnoDB<span style=\"font-family: 宋体;\">锁的算法</span></strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">1、Record&nbsp;Lock<span style=\"font-family: 宋体;\">：单个行记录上的锁</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">2、Gap&nbsp;Lock<span style=\"font-family: 宋体;\">：间隙锁，锁定一个范围，但不包含记录本身</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">3、Next-key&nbsp;Lock:Gap&nbsp;Lock+Record&nbsp;Lock<span style=\"font-family: 宋体;\">，锁定一个范围，并且锁定记录本身</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">Record&nbsp;Lock<span style=\"font-family: 宋体;\">总是会去锁住索引记录，如果</span><span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">存储引擎表建立的时候没有设置任何一个索引，这时</span><span style=\"font-family: 'Times New Roman';\">InnodB</span><span style=\"font-family: 宋体;\">存储引擎会使用隐式的主键来进行锁定，在</span><span style=\"font-family: 'Times New Roman';\">Repeatable&nbsp;Read</span><span style=\"font-family: 宋体;\">隔离级别下，</span><span style=\"font-family: 'Times New Roman';\">Next-key&nbsp;Lock&nbsp;</span><span style=\"font-family: 宋体;\">算法是默认的行记录锁定算法。</span></span></p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>锁带来的问题</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">1、丢失更新</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">如何避免丢失更新：<span style=\"color: rgb(255, 0, 0);\">让事务变成串行操作，而不是并发的操作，即对每个事务开始<span style=\"font-family: 'Times New Roman';\">---</span></span><span style=\"font-family: 宋体;\"><span style=\"color: rgb(255, 0, 0);\">对读取记录加排他锁</span>。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">2、脏读</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">脏读即一个事务可以读到另一个事务中未提交的数据，这违反了数据库的隔离性。</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">脏读发生的条件是需要事务的隔离级别为<span style=\"font-family: 'Times New Roman';\">Read&nbsp;uncommitted</span><span style=\"font-family: 宋体;\">。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">3、不可重复读</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">不可重复读与脏读的区别是：<span style=\"color: rgb(255, 0, 0);\">脏读是读到未提交的数据，而不可重复读读到的是已经提交的数据</span>。</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">一般来说，不可重复读是可以接受的，在<span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">存储引擎中，<span style=\"color: rgb(255, 0, 0);\">通过使用</span></span><span style=\"color: rgb(255, 0, 0);\"><span style=\"font-family: 'Times New Roman';\">Next-Key&nbsp;Lock</span><span style=\"font-family: 宋体;\">算法来避免不可重复读的问题。</span></span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">值得注意的是，默认情况下<span style=\"font-family: 'Times New Roman';\">InnoDB</span><span style=\"font-family: 宋体;\">存储引擎不会回滚超时引发的错误异常。</span></p><hr style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: 15px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>死锁的相关问题</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>1、死锁发生的条件</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">互斥条件：一个资源每次只能被一个进程使用；请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放；不剥夺条件<span style=\"font-family: 'Times New Roman';\">:</span><span style=\"font-family: 宋体;\">进程已获得的资源，在末使用完之前，不能强行剥夺；循环等待条件</span><span style=\"font-family: 'Times New Roman';\">:</span><span style=\"font-family: 宋体;\">若干进程之间形成一种头尾相接的循环等待资源关系。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>2、死锁检测（根据网上的经验）</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">Innodb<span style=\"font-family: 宋体;\">检测死锁有两种情况，一种是满足循环等待条件，还有另一种策略：锁结构超过</span><span style=\"font-family: 'Times New Roman';\">mysql</span><span style=\"font-family: 宋体;\">配置中设置的最大数量或锁的遍历深度超过设置的最大深度时，</span><span style=\"font-family: 'Times New Roman';\">innodb</span><span style=\"font-family: 宋体;\">也会判断为死锁（这是提高性能方面的考虑，避免事务一次占用太多的资源）。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">因循环等待条件而产生的死锁只有可能是四种形式：两张表两行记录交叉申请互斥锁、同一张表则存在主键索引锁冲突、主键索引锁与非聚簇索引锁冲突、锁升级导致的锁等待队列阻塞。</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>3、死锁避免（根据网上的经验）</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">1.如果使用<span style=\"font-family: 'Times New Roman';\">insert…select</span><span style=\"font-family: 宋体;\">语句备份表格且数据量较大，在单独的时间点操作，避免与其他</span><span style=\"font-family: 'Times New Roman';\">sql</span><span style=\"font-family: 宋体;\">语句争夺资源，或使用</span><span style=\"font-family: 'Times New Roman';\">select&nbsp;into&nbsp;outfile</span><span style=\"font-family: 宋体;\">加上</span><span style=\"font-family: 'Times New Roman';\">load&nbsp;data&nbsp;infile</span><span style=\"font-family: 宋体;\">代替&nbsp;</span><span style=\"font-family: 'Times New Roman';\">insert…select</span><span style=\"font-family: 宋体;\">，这样不仅快，而且不会要求锁定</span><br>2.&nbsp;<span style=\"font-family: 宋体;\">一个锁定记录集的事务，其操作结果集应尽量简短，以免一次占用太多资源，与其他事务处理的记录冲突。</span><br>3.<span style=\"font-family: 宋体;\">更新或者删除表格数据，</span><span style=\"font-family: 'Times New Roman';\">sql</span><span style=\"font-family: 宋体;\">语句的</span><span style=\"font-family: 'Times New Roman';\">where</span><span style=\"font-family: 宋体;\">条件都是主键或都是索引，避免两种情况交叉，造成死锁。对于</span><span style=\"font-family: 'Times New Roman';\">where</span><span style=\"font-family: 宋体;\">子句较复杂的情况，将其单独通过</span><span style=\"font-family: 'Times New Roman';\">sql</span><span style=\"font-family: 宋体;\">得到后，再在更新语句中使用。</span><br>4.&nbsp;sql<span style=\"font-family: 宋体;\">语句的嵌套表格不要太多，能拆分就拆分，避免占有资源同时等待资源，导致与其他事务冲突。</span><br>5.&nbsp;<span style=\"font-family: 宋体;\">对定点运行脚本的情况，避免在同一时间点运行多个对同一表进行读写的脚本，特别注意加锁且操作数据量比较大的语句。</span><br>6.<span style=\"font-family: 宋体;\">应用程序中增加对死锁的判断，如果事务意外结束，重新运行该事务，减少对功能的影响。</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\"><strong>4、死锁解决</strong></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">1)先执行<span style=\"font-family: 'Times New Roman';\">show&nbsp;processlist</span><span style=\"font-family: 宋体;\">找到死锁线程号</span><span style=\"font-family: 'Times New Roman';\">.</span><span style=\"font-family: 宋体;\">然后</span><span style=\"font-family: 'Times New Roman';\">Kill</span>&nbsp;pid</p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">2)Show&nbsp;innodb&nbsp;status<span style=\"font-family: 宋体;\">检查引擎状态&nbsp;</span><span style=\"font-family: 'Times New Roman';\">,</span><span style=\"font-family: 宋体;\">可以看到哪些语句产生死锁</span></p><p class=\"p0\" style=\"font-family: 'Helvetica Neue'; font-size: 15px; margin: 10px auto; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; line-height: 27px; background-color: rgb(255, 255, 255);\">3)<span style=\"font-family: 宋体;\">查看</span><span style=\"font-family: 'Times New Roman';\">information_schema</span><span style=\"font-family: 宋体;\">架构下的</span><span style=\"font-family: 'Times New Roman';\">innodb_locks</span><span style=\"font-family: 宋体;\">、</span><span style=\"font-family: 'Times New Roman';\">innodb_trx</span><span style=\"font-family: 宋体;\">、</span><span style=\"font-family: 'Times New Roman';\">innodb_lock_waits</span><span style=\"font-family: 宋体;\">等表</span></p>"
    }
  ]
}